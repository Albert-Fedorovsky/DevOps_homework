#-------------------------------------------------------------------------------
# AWS CloudFormation template
# Author: Albert Fedorovsky
# Resouces:
#   Network Layer:
#     - VPC - 1 item
#     - Internet Gateway - 1 item
#     - Subnets - 2 items
#     - RouteTables - 1 item
#   Securitty:
#     - Security grops - 1 item
#     - IAM role - 1 item
#   Resouces:
#     - EC2 instances - 2 items
#     - Application loadbalancer - 1 item
#-------------------------------------------------------------------------------

AWSTemplateFormatVersion: 2010-09-09
Description: "Network: VPC, Subnets + RouteTables, Internet + NAT Gateway"

Metadata:
 AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - Environment
          - VPCBlock
      -
        Label:
          default: "Subnets CIDR Blocks"
        Parameters:
          - PublicSubnetACIDR
          - PublicSubnetBCIDR
      -
        Label:
          default: "EC2 instances parameters"
        Parameters:
          - EC2AMI
          - EC2Type
          - S3BucketName

Parameters:
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
  Environment:
    Type: String
    Default: "task-07"

  VPCBlock:
    Type: String
    Default: '10.0.0.0/16'

  PublicSubnetACIDR:
    Type: String
    Default: '10.0.10.0/24'
    Description: "Public Subnet-A CIDR"

  PublicSubnetBCIDR:
    Type: String
    Default: '10.0.20.0/24'
    Description: "Public Subnet-B CIDR"

  EC2AMI:
    Type: String
    Default: 'ami-05d34d340fb1d89e5'
    Description: "Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type (64-bit x86)"

  EC2Type:
    Type: String
    Default: 't2.micro'
    Description: "Type of instance (InstanceType)"

  S3BucketName:
    Type: String
    Default: 'task-07'
    Description: "Name of S3 bucket storing index.html"

Resources:

#===================================== VPC =====================================
  VPC:
    Type: AWS::EC2::VPC
    Properties: # Attach Primary CIDR Block
      CidrBlock: !Ref VPCBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref Environment

#================================= SecurityGroup ===============================
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html#cfn-ec2-securitygroup-securitygroupegress
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group-ingress.html
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-security-group-egress.html
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http connections.
      VpcId:
         Ref: VPC
      SecurityGroupIngress:
      - Description: Allow incoming http connections.
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        FromPort: 80
        ToPort: 80
      SecurityGroupEgress:
      - Description: Allow outcoming http connections.
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        FromPort: 80
        ToPort: 80
  IntboundRule1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      CidrIp: 0.0.0.0/0
      Description: Allow incoming SSH connections.
      FromPort: 22
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      ToPort: 22
  # IntboundRule2:
    # Type: 'AWS::EC2::SecurityGroupIngress'
    # Properties:
      # CidrIp: 0.0.0.0/0
      # Description: Allow incoming ping from any hosts.
      # FromPort: -1
      # GroupId: !Ref InstanceSecurityGroup
      # IpProtocol: icmp
      # ToPort: -1
  OutboundRule1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp: 0.0.0.0/0
      Description: Allows any outcoming connections.
      GroupId: !Ref InstanceSecurityGroup
      FromPort: -1
      IpProtocol: -1
      ToPort: -1
  # OutboundRule2:
    # Type: AWS::EC2::SecurityGroupEgress
    # Properties:
      # CidrIp: 0.0.0.0/0
      # Description: Allows outcoming ping to any hosts.
      # GroupId: !Ref InstanceSecurityGroup
      # FromPort: -1
      # IpProtocol: icmp
      # ToPort: -1

#============================== Internet Gateway ===============================
  GatewayInternet:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Ref Environment

  GatewayAttachmentInternet: # Attachment IGW to VPC
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:  !Ref VPC
      InternetGatewayId: !Ref GatewayInternet

#============================= Public RouteTables ==============================
  RouteTableForPublicSubnet: # Creation of Empty Route Table
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "PublicRouteTable" ] ]

  RoutesForPublicRouteTable: # Creation and Attachment of Routes for Route Table
    Type: "AWS::EC2::Route"
    DependsOn: GatewayAttachmentInternet
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref GatewayInternet
      RouteTableId: !Ref RouteTableForPublicSubnet

#================= Associate Public Route for Public Subnets ===================
  RouteAssociationPublicA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet
      SubnetId: !Ref PublicSubnetA

  RouteAssociationPublicB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet
      SubnetId: !Ref PublicSubnetB

#=============================== ALL Subnets ===================================
  PublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref "PublicSubnetACIDR"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref Environment, "-Public-A" ] ]
        - Key: kubernetes.io/role/elb
          Value: 1

  PublicSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref "PublicSubnetBCIDR"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref Environment, "-Public-B" ] ]
        - Key: kubernetes.io/role/elb
          Value: 1

#===================== S3 bucket for website hosting ===========================
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-s3.html
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html#cfn-s3-bucket-accesscontrol
#https://aws.amazon.com/ru/premiumsupport/knowledge-center/ec2-instance-access-s3-bucket/
#https://docs.aws.amazon.com/efs/latest/ug/wt1-test.html
#https://devacademy.ru/article/razbiraemsya-v-http-proksi-nginx-balansirovke-nagruzki-buferizatsii-i-keshirovanii/
  # S3Bucket:
    # Type: AWS::S3::Bucket
    # Properties:
      # AccessControl: PublicRead
      # WebsiteConfiguration:
        # IndexDocument: index.html
        # ErrorDocument: error.html
    # DeletionPolicy: Retain
  # BucketPolicy:
    # Type: AWS::S3::BucketPolicy
    # Properties:
      # PolicyDocument:
        # Id: MyPolicy
        # Version: 2012-10-17
        # Statement:
          # - Sid: PublicReadForGetBucketObjects
            # Effect: Allow
            # Principal: '*'
            # Action: 's3:GetObject'
            # Resource: !Join
              # - ''
              # - - 'arn:aws:s3:::'
                # - !Ref S3Bucket
                # - /*
      # Bucket: !Ref S3Bucket

# ================================ IAM Role ====================================
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
# https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html
# https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-with-s3-actions.html
  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'

# =========================== IAM InstanceProfile ==============================
  RootInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref RootRole

#=============================== EC2 instances =================================
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-network-iface-embedded.html
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-base64.html
#https://coderoad.ru/57784287/%D0%9A%D0%B0%D0%BA-%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%B8%D1%82%D1%8C-NGINX-%D0%BD%D0%B0-AWS-EC2-Linux-2
#https://tecadmin.net/mount-s3-bucket-centosrhel-ubuntu-using-s3fs/
  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref RootInstanceProfile
      ImageId: !Ref EC2AMI
      InstanceType: !Ref EC2Type
      KeyName: Frankfurt-rsa-key-pair
      NetworkInterfaces:
        - DeviceIndex: "0"
          GroupSet:
            - Ref: InstanceSecurityGroup
          SubnetId:
            Ref: PublicSubnetA
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            echo ${AWS::StackName} > /home/ec2-user/StackName.txt
            yum update -y
            amazon-linux-extras list | grep nginx
            amazon-linux-extras enable nginx1
            yum clean metadata
            yum -y install nginx
            nginx -v
            echo -E '<!DOCTYPE html><html><head><META HTTP-EQUIV="Content-Type"CONTENT="text/html;charset=UTF8"><title>Andersen DevOps cource: task_07</title><style type= "text/css"></style> </head><script type= "text/javascript" language="JavaScript"> </script><body><h1>task_07</h1>This is the first (script) EC2 instance deployed to connect to a load balancer.</body></html>' > /usr/share/nginx/html/index.html
            systemctl enable nginx.service
            systemctl start nginx.service
            aws s3 cp s3://${S3BucketName}/index.html /usr/share/nginx/html/

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref RootInstanceProfile
      ImageId: !Ref EC2AMI
      InstanceType: !Ref EC2Type
      KeyName: Frankfurt-rsa-key-pair
      NetworkInterfaces:
        - DeviceIndex: "0"
          GroupSet:
            - Ref: InstanceSecurityGroup
          SubnetId:
            Ref: PublicSubnetB
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            echo ${AWS::StackName} > /home/ec2-user/StackName.txt
            yum update -y
            amazon-linux-extras list | grep nginx
            amazon-linux-extras enable nginx1
            yum clean metadata
            yum -y install nginx
            nginx -v
            echo -E '<!DOCTYPE html><html><head><META HTTP-EQUIV="Content-Type"CONTENT="text/html;charset=UTF8"><title>Andersen DevOps cource: task_07</title><style type= "text/css"></style> </head><script type= "text/javascript" language="JavaScript"> </script><body><h1>task_07</h1>This is the second (script) EC2 instance deployed to connect to a load balancer.</body></html>' > /usr/share/nginx/html/index.html
            systemctl enable nginx.service
            systemctl start nginx.service
            aws s3 cp s3://${S3BucketName}/index2.html /usr/share/nginx/html/index.html

#=============================== EC2 AutoRecovery ==============================
  # RecoveryTestAlarm1:
    # Type: AWS::CloudWatch::Alarm
    # Properties:
      # AlarmDescription: Trigger a recovery when instance status check fails for 15 consecutive minutes.
      # Namespace: AWS/EC2
      # MetricName: StatusCheckFailed_System
      # Statistic: Minimum
      # Period: '60'
      # EvaluationPeriods: '15'
      # ComparisonOperator: GreaterThanThreshold
      # Threshold: '0'
      # AlarmActions: [ !Sub "arn:aws:automate:${AWS::Region}:ec2:recover" ]
      # Dimensions:
      # - Name: EC2Instance1
        # Value:
          # Ref: EC2Instance1
  
  # RecoveryTestAlarm2:
    # Type: AWS::CloudWatch::Alarm
    # Properties:
      # AlarmDescription: Trigger a recovery when instance status check fails for 15 consecutive minutes.
      # Namespace: AWS/EC2
      # MetricName: StatusCheckFailed_System
      # Statistic: Minimum
      # Period: '60'
      # EvaluationPeriods: '15'
      # ComparisonOperator: GreaterThanThreshold
      # Threshold: '0'
      # AlarmActions: [ !Sub "arn:aws:automate:${AWS::Region}:ec2:recover" ]
      # Dimensions:
      # - Name: EC2Instance2
        # Value:
          # Ref: EC2Instance2

#=============================== Load balancers ================================
#https://aws.amazon.com/ru/elasticloadbalancing/
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-elb.html
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
#https://computingforgeeks.com/configure-aws-application-load-balancer-with-cloudformation/
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html
#https://dev.classmethod.jp/articles/cloudformation-template-for-vpc-with-ec2-and-alb/

#=========================== Classic Load balancer =============================
  # MyLoadBalancer:
    # Type: AWS::ElasticLoadBalancing::LoadBalancer
    # DependsOn: GatewayAttachmentInternet
    # Properties:
      # Subnets:
      # - Ref: PublicSubnetA
      # - Ref: PublicSubnetB
      # Instances:
      # - Ref: EC2Instance1
      # - Ref: EC2Instance2
      # SecurityGroups:
        # - Ref: InstanceSecurityGroup
      # Listeners:
      # - LoadBalancerPort: '80'
        # InstancePort: '80'
        # Protocol: HTTP
      # HealthCheck:
        # Target: HTTP:80/
        # HealthyThreshold: '2'
        # UnhealthyThreshold: '3'
        # Interval: '15'
        # Timeout: '4'

#========================= Application Load balancer ===========================
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application Load Balancer Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ApplicationLoadBalancer
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationTargetGroup

  ApplicationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Name: ApplicationTargetGroup
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      Targets:
        - Id: !Ref EC2Instance1
          Port: 80
        - Id: !Ref EC2Instance2
          Port: 80

#================================== OUTPUTS ====================================
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html
#https://serverfault.com/questions/935350/how-to-get-public-ip-of-instance-using-cloud-formation
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip.html#aws-resource-ec2-eip-ref
Outputs:
  VPC:
    Description: ID for the VPC
    Value: !Ref VPC
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "VPC" ] ]

  VPCBlock1:
    Description: Primary CIDR block for the VPC
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "CIDR1" ] ]

  PublicA:
    Description: ID for Public Subnet A
    Value: !Ref PublicSubnetA
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "PublicSubnetA" ] ]

  PublicB:
    Description: ID for Public Subnet B
    Value: !Ref PublicSubnetB
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "PublicSubnetB" ] ]

  # WebsiteURL:
    # Value: !GetAtt
      # - S3Bucket
      # - WebsiteURL
    # Description: URL for website hosted on S3
  # S3BucketSecureURL:
    # Value: !Join
      # - ''
      # - - 'https://'
        # - !GetAtt
          # - S3Bucket
          # - DomainName
    # Description: Name of S3 bucket to hold website content

  Instance1PublicIP:
    Description: First ec2 public IP
    Value: !GetAtt EC2Instance1.PublicIp
   
  Instance2PublicIP:
    Description: Second ec2 public IP
    Value: !GetAtt EC2Instance2.PublicIp
  
  Instance1PrivateIp:
    Description: First ec2 private IP
    Value: !GetAtt EC2Instance1.PrivateIp
    
  Instance2PrivateIp:
    Description: First ec2 private IP
    Value: !GetAtt EC2Instance2.PrivateIp
    
  AppLoadbalancerDNSName:
    Description: Application loadbalancer DNS Name
    Value: !GetAtt LoadBalancer.DNSName
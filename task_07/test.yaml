# --------------------------------------------------------------------------------------------------
# CloudFormation Network Layer: VPC, Subnets + RouteTables, Internet + NAT Gateways
# Author: Albert Fedorovsky
# --------------------------------------------------------------------------------------------------
AWSTemplateFormatVersion: 2010-09-09
Description: "Network: VPC, Subnets + RouteTables, Internet + NAT Gateways"

Metadata:
 AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - Environment
          - VPCBlock
      -
        Label:
          default: "Subnets CIDR Blocks"
        Parameters:
          - PublicSubnetACIDR
          - PublicSubnetBCIDR

Parameters:
  Environment:
    Type: String
    Default: "My-VPC"

  VPCBlock:
    Type: String
    Default: '10.0.0.0/16'

  PublicSubnetACIDR:
    Type: String
    Default: '10.0.10.0/24'
    Description: "Public Subnet-A CIDR"

  PublicSubnetBCIDR:
    Type: String
    Default: '10.0.20.0/24'
    Description: "Public Subnet-B CIDR"

Resources:

#============= VPC ==================
  VPC:
    Type: AWS::EC2::VPC
    Properties: # Attach Primary CIDR Block
      CidrBlock: !Ref VPCBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref Environment

#=========== SecurityGroup ============
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
         Ref: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
		  
#====== Internet Gateway =======
  GatewayInternet:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Ref Environment

  GatewayAttachmentInternet: # Attachment IGW to VPC
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:  !Ref VPC
      InternetGatewayId: !Ref GatewayInternet

#====== Public RouteTables =========
  RouteTableForPublicSubnet: # Creation of Empty Route Table
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "PublicRouteTable" ] ]

  RoutesForPublicRouteTable: # Creation and Attachment of Routes for Route Table
    Type: "AWS::EC2::Route"
    DependsOn: GatewayAttachmentInternet
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref GatewayInternet
      RouteTableId: !Ref RouteTableForPublicSubnet

#====== Associate Public Route for Public Subnets
  RouteAssociationPublicA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet
      SubnetId: !Ref PublicSubnetA

  RouteAssociationPublicB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet
      SubnetId: !Ref PublicSubnetB

#=============================== EC2 instances ===================================
  EC2InstanceA:
    Type: AWS::EC2::Instance
    Properties:      
      #BlockDeviceMappings:
      #  - BlockDeviceMapping      
      DisableApiTermination: false
      EbsOptimized: false
      #ElasticGpuSpecifications:
      #  - ElasticGpuSpecification
      #IamInstanceProfile: String
      ImageId: !FindInMap [ AWSRegionArch2AMI, !Ref 'AWS::Region' , !FindInMap [ AWSInstanceType2Arch, !Ref InstanceType, Arch ] ]      
      InstanceType: t2.micro
      #Ipv6AddressCount: Integer
      #Ipv6Addresses:
        #- InstanceIpv6Address      
      KeyName: !Ref Frankfurt-rsa-key-pair
      #LaunchTemplate:
        #LaunchTemplateSpecification
      #LicenseSpecifications:
        #- LicenseSpecification
      #NetworkInterfaces:
        #- NetworkInterface      
      #PrivateIpAddress: String      
      SecurityGroupIds:
        - String
      SecurityGroups:
        - String
      SourceDestCheck: Boolean
      SsmAssociations:
        - SsmAssociation
      SubnetId: String
      Tags:
        - Tag
      Tenancy: String
      UserData: String
      Volumes:
        - Volume

#=============================== ALL Subnets ===================================
  PublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref "PublicSubnetACIDR"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref Environment, "-Public-A" ] ]
        - Key: kubernetes.io/role/elb
          Value: 1

  PublicSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref "PublicSubnetBCIDR"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref Environment, "-Public-B" ] ]
        - Key: kubernetes.io/role/elb
          Value: 1

#=================== OUTPUTS ===========================
Outputs:
  VPC:
    Description: ID for the VPC
    Value: !Ref VPC
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "VPC" ] ]

  VPCBlock1:
    Description: Primary CIDR block for the VPC
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "CIDR1" ] ]

  PublicA:
    Description: ID for Public Subnet A
    Value: !Ref PublicSubnetA
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "PublicSubnetA" ] ]

  PublicB:
    Description: ID for Public Subnet B
    Value: !Ref PublicSubnetB
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "PublicSubnetB" ] ]

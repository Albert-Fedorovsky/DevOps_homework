# --------------------------------------------------------------------------------------------------
# CloudFormation Network Layer: VPC, Subnets + RouteTables, Internet + NAT Gateway
# Author: Albert Fedorovsky
# --------------------------------------------------------------------------------------------------
AWSTemplateFormatVersion: 2010-09-09
Description: "Network: VPC, Subnets + RouteTables, Internet + NAT Gateway"

Metadata:
 AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - Environment
          - VPCBlock
      -
        Label:
          default: "Subnets CIDR Blocks"
        Parameters:
          - PublicSubnetACIDR
          - PublicSubnetBCIDR
      -
        Label:
          default: "EC2 instances parameters"
        Parameters:
          - EC2AMI
          - EC2Type

Parameters:
  Environment:
    Type: String
    Default: "My-VPC"

  VPCBlock:
    Type: String
    Default: '10.0.0.0/16'

  PublicSubnetACIDR:
    Type: String
    Default: '10.0.10.0/24'
    Description: "Public Subnet-A CIDR"

  PublicSubnetBCIDR:
    Type: String
    Default: '10.0.20.0/24'
    Description: "Public Subnet-B CIDR"

  EC2AMI:
    Type: String
    Default: 'ami-05d34d340fb1d89e5'
    Description: "Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type (64-bit x86)"

  EC2Type:
    Type: String
    Default: 't2.micro'
    Description: "Type of instance (InstanceType)"

Resources:

#============= VPC ==================
  VPC:
    Type: AWS::EC2::VPC
    Properties: # Attach Primary CIDR Block
      CidrBlock: !Ref VPCBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref Environment

#=========== SecurityGroup ============
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html#cfn-ec2-securitygroup-securitygroupegress
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group-ingress.html
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-security-group-egress.html
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http connections.
      VpcId:
         Ref: VPC
      SecurityGroupIngress:
      - Description: Allow incoming http connections.
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        FromPort: 80
        ToPort: 80
      SecurityGroupEgress:
      - Description: Allow outcoming http connections.
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        FromPort: 80
        ToPort: 80
  IntboundRule1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      CidrIp: 0.0.0.0/0
      Description: Allow incoming SSH connections.
      FromPort: 22
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      ToPort: 22
  # IntboundRule2:
    # Type: 'AWS::EC2::SecurityGroupIngress'
    # Properties:
      # CidrIp: 0.0.0.0/0
      # Description: Allow incoming ping from any hosts.
      # FromPort: -1
      # GroupId: !Ref InstanceSecurityGroup
      # IpProtocol: icmp
      # ToPort: -1
  OutboundRule1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp: 0.0.0.0/0
      Description: Allows outcoming ping to any hosts.
      GroupId: !Ref InstanceSecurityGroup
      FromPort: -1
      IpProtocol: icmp
      ToPort: -1

#====== Internet Gateway =======
  GatewayInternet:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Ref Environment

  GatewayAttachmentInternet: # Attachment IGW to VPC
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:  !Ref VPC
      InternetGatewayId: !Ref GatewayInternet

#====== Public RouteTables =========
  RouteTableForPublicSubnet: # Creation of Empty Route Table
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ " ", [ !Ref Environment, "PublicRouteTable" ] ]

  RoutesForPublicRouteTable: # Creation and Attachment of Routes for Route Table
    Type: "AWS::EC2::Route"
    DependsOn: GatewayAttachmentInternet
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref GatewayInternet
      RouteTableId: !Ref RouteTableForPublicSubnet

#====== Associate Public Route for Public Subnets
  RouteAssociationPublicA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet
      SubnetId: !Ref PublicSubnetA

  RouteAssociationPublicB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet
      SubnetId: !Ref PublicSubnetB

#=============================== ALL Subnets ===================================
  PublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref "PublicSubnetACIDR"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref Environment, "-Public-A" ] ]
        - Key: kubernetes.io/role/elb
          Value: 1

  PublicSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock: !Ref "PublicSubnetBCIDR"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "", [ !Ref Environment, "-Public-B" ] ]
        - Key: kubernetes.io/role/elb
          Value: 1

#=============================== EC2 instances ===================================
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-network-iface-embedded.html
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-base64.html
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref EC2AMI
      InstanceType: !Ref EC2Type
      KeyName: Frankfurt-rsa-key-pair
      NetworkInterfaces:
        - DeviceIndex: "0"
          GroupSet:
            - Ref: InstanceSecurityGroup
          SubnetId:
            Ref: PublicSubnetA
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          echo 123abcd ${AWS::StackName} > /test.txt

#================= Load balancer =======================
#https://aws.amazon.com/ru/elasticloadbalancing/
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-elb.html


#=================== OUTPUTS ===========================
Outputs:
  VPC:
    Description: ID for the VPC
    Value: !Ref VPC
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "VPC" ] ]

  VPCBlock1:
    Description: Primary CIDR block for the VPC
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "CIDR1" ] ]

  PublicA:
    Description: ID for Public Subnet A
    Value: !Ref PublicSubnetA
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "PublicSubnetA" ] ]

  PublicB:
    Description: ID for Public Subnet B
    Value: !Ref PublicSubnetB
    Export:
      Name: !Join [ "-", [ !Ref "Environment", "PublicSubnetB" ] ]
